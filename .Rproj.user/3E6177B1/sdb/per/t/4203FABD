{
    "contents" : "---\ntitle: \"Making a map of African Swine Fever (ASF) outbreaks in Europe  \nfrom the data scrapped from the OIE WAHID website\"\nauthor: \"Pavel Vodrážka\"\ndate: \"Thursday, January 15, 2015\"\noutput: html_document\n---\n\n### Reason\n\nThe maps that can be obtained from the [OIE WAHID website](http://www.oie.int/wahis_2/public/wahid.php/Diseaseinformation/Diseaseoutbreakmaps) are not aesthetically \npleasing, and can be downloaded only as raster images that are not suitable for \nincluding in print quality publications. Other sources of data and maps of ASF \noutbreaks were not found.\n\n### Obtaining the data\n\nThere is no option to dowload the data or no public data API on the OIE WAHID \nwebsite. Data needs to be scraped from the [\"Immediate notifications and \nFollow-Ups\"](http://www.oie.int/wahis_2/public/wahid.php/Diseaseinformation/Immsummary) part of the site.\n\nWe go all the way from getting the webpages of summaries of immediate \nnotifications and follow-ups for african swine fever for all the years (2005 -- \n2014), extracting the links of the full country reports, getting the full \nreports (immediate notifications), extracting the links of the follow-up \nreports, getting the follow-up reports, and getting and processing data from the \ndowloaded reports.\n\nThe starting page is http://www.oie.int/wahis_2/public/wahid.php/Diseaseinformation/Immsummary. The following code refers to the version of the web denoted in the \nfooter:\n```\n+--------------------------------------------------------------+\n| World Animal Health Information Database (WAHID) – Version 1 |\n| Copyright © World Organisation for Animal Health (OIE)       |\n| Release date: 30 December 2013 August 2012                   |\n+--------------------------------------------------------------+\n```\nWe first need to be able to programmatically fill the form on the page and download \nthe resulting summaries. We prepare a function `getDiseaseSummaries` using some \nfunctions from the \"RHTMLForms\" package to accomplish this part of the task.\n\nThere are four forms on the page; after inspecting the page source we know that \nwe are interested in the `diseaseform`. Our function `getDiseaseSummaries` \ncontains a function `summaries_fun` that is created programmatically from the \npage source code and that will serve to submit that form and retrieve the \nresulting webpages.\n\n```{r cache=TRUE}\nlibrary(RHTMLForms)\nlibrary(RCurl)\n\ngetDiseaseSummaries <- function(disease, years) {\n        \n        url <- \"http://www.oie.int/wahis_2/public/wahid.php/Diseaseinformation/Immsummary\"\n        forms <- getHTMLFormDescription(url) # RHTMLForms\n        \n        summaries_fun <- createFunction(forms[[\"diseaseform\"]]) # RHTMLForms\n        \n        years_char <- as.character(years)\n        names(years) <- years_char\n        # summaries_dir <- \"summaries\"\n        # dir.create(summaries_dir)\n        # summaries_files <- file.path(summaries_dir,\n        #                              paste0(years_char,\n        #                                     \".html\")\n        #                              )\n        \n        summaries <- sapply(years,\n                            function(x) {\n                                    summaries_fun(year = x,\n                                                  disease_id_terrestrial = disease)\n                                    },\n                            simplify = FALSE)\n        \n        # junk <- mapply(write,\n        #                x = summaries,\n        #                file = summaries_files)\n        #         \n        # write(format(Sys.time()),\n        #       file = file.path(summaries_dir,\n        #                        \"date_downloaded.txt\")\n        #       )\n        #\n        return(summaries)\n        }\n```\n\nBy inspecting the page source and the forms we figure out the necessary \nparameters to the `getDiseaseSummaries` function: `disease_id_terrestrial` \n(`= \"12\"` for ASF), and `year`. Now we obtain the yearly summaries of immediate \nnotifications and follow-ups as a `summaries` object -- a list containing the raw \nhtml of pages returned by repeatedly submitting the form with given disease selected \nfor the range of years speficied.\n\n```{r cache=TRUE}\nyears <- 2005:2014\ndisease = \"12\"\n\nsummaries <- getDiseaseSummaries(disease = disease, years = years)\n```\n\nNow we will parse the html of the pages stored in the `summaries` object.\n\n[//]: # (Finish here)\n\n```{r cache=TRUE}\nlibrary(XML)\n\nparseSummary <- function(summary) {\n        \n        doc <- xmlRoot(htmlTreeParse(summary, useInternalNodes = TRUE))\n        \n        get_node <- function(doc, XPath) {\n                gsub(\"^\\\\s*\",\n                     \"\",\n                     gsub(\"\\\\s*$\",\n                          \"\",\n                          xpathSApply(doc, XPath, xmlValue)\n                          )\n                     )\n                }\n        \n        country <- get_node(doc,\n                            \"//table[@class='Table27']\n                            //tr[@class='outbreakdetails']\n                            //td[@class='filtrer_tds vacborder outbreak_country']\n                            |\n                            //table[@class='Table27']\n                            //tr[@class='outbreakdetails']\n                            //td[@class='filtrer_tds outbreak_country no_topborder']\")\n        while(length(which(country == \"Â\")) > 0) {\n                country[which(country == \"Â\")] <- country[which(country == \"Â\") - 1]\n                }        \n        temp_statuses_dates <- get_node(doc,\n                                        \"//table[@class='Table27']\n                                        //tr[@class='outbreakdetails']\n                                        //td[@class='filtrer_tds vacborder' and @color='red']\")\n        status <- strsplit(temp_statuses_dates, \"\\\\d{2}/\\\\d{2}/\\\\d{4}\")\n        date <- sapply(strsplit(temp_statuses_dates, \"[^[:digit:]/]*\"), paste, collapse = \"\")\n        outbreaks_link_parameters <- strsplit(gsub(\"outbreaklist\\\\('(\\\\w{3})',(\\\\d*)\\\\);\",\n                                                   \"\\\\2|\\\\1\",\n                                                   xpathSApply(doc,\n                                                               \"//table[@class='Table27']\n                                                               //tr[@class='outbreakdetails']\n                                                               //td[@class='filtrer_tds vacborder']\n                                                               /a[@href='javascript:;']/@onclick\")\n                                                   ),\n                                              \"|\",\n                                              fixed = TRUE)\n        outbreaks_link_parameters_df <- t(sapply(outbreaks_link_parameters, function(x) list(reportid = x[1], summary_country = x[2])))\n        rownames(outbreaks_link_parameters_df) <- NULL\n        event_summary_link <- paste0(\"http://www.oie.int\",\n                                     xpathSApply(doc,\n                                                 \"//table[@class='Table27']\n                                                 //tr[@class='outbreakdetails']\n                                                 //td[@class='filtrer_tds vacborder']\n                                                 /a[contains(@href, 'viewsummary')]\n                                                 /@href\")\n                                     )\n        full_report_link <- gsub(\"javascript: open_report\\\\(\\\"\",\n                                 \"http://www.oie.int\",\n                                 gsub(\"\\\",\",\n                                      \"reportid=\",\n                                      gsub(\"\\\\);\",\n                                           \"\",\n                                           xpathSApply(doc,\n                                                       \"//table[@class='Table27']\n                                                       //tr[@class='outbreakdetails']\n                                                       //td[@class='filtrer_tds vacborder']\n                                                       /a[contains(@href, 'page_refer=MapFullEventReport')]\n                                                       /@href\")\n                                           )\n                                      )\n                                 )\n        names(full_report_link) <- NULL\n        \n        return(cbind(country,\n                     status,\n                     date,\n                     outbreaks_link_parameters_df,\n                     event_summary_link,\n                     full_report_link)\n               )\n        }\n\ntest <- lapply(summaries, parseSummary)\n\n```\n",
    "created" : 1421313406224.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3595701948",
    "id" : "4203FABD",
    "lastKnownWriteTime" : 1421382499,
    "path" : "H:/Dokumenty/Odborné/Práce pro jiné (statistika...)/20150114 PaBa (mapa případů ASF)/ASF_map_R_project/main_document.Rmd",
    "project_path" : "main_document.Rmd",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "source_on_save" : false,
    "type" : "r_markdown"
}